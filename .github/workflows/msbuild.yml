# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
    - name: Run Parasoft C/C++test
      # You may pin to the exact commit or the version.
      # uses: parasoft/run-cpptest-action@a1dd4146c4b92397c1761e0c2162b365db902cc8
      uses: parasoft/run-cpptest-action@2.0.0
      with:
      # Installation folder of Parasoft C/C++test. If not specified, the cpptestcli executable must be added to $PATH.
      installDir: # optional
      # Working directory for running C/C++test.
      workingDir: # optional, default is ${{ github.workspace }}
      # Identifier of a compiler configuration. Ensure you specify the configuration that matches your compiler.
      compilerConfig: # optional, default is gcc_9-64
      # Test configuration to be used for code analysis.
      testConfig: # optional, default is builtin://Recommended Rules
      # Output folder for reports from code analysis.
      reportDir: # optional, default is reports
      # Format of reports from code analysis.
      reportFormat: # optional, default is xml,html,sarif
      # Input scope for analysis (typically, cpptestscan.bdf or compile_commands.json, depending on the project type and the build system).
      input: # optional, default is cpptestscan.bdf
      # Additional parameters for the cpptestcli executable.
      additionalParams: # optional, default is 
      # Command line pattern for running C/C++test.
      commandLinePattern: # optional, default is ${cpptestcli} -compiler "${compilerConfig}" -config "${testConfig}" -property report.format=${reportFormat} -report "${reportDir}" -module . -input "${input}" ${additionalParams}
   
   - name: Setup C/C++ Compiler
      uses: rlalik/setup-cpp-compiler@v1.2
      with:
        # Compiler to install
      compiler: # optional, default is gcc-latest
      
